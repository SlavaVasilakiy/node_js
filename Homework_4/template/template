// Урок 4. Создание REST API с Express
// Для того, чтобы пользователи хранились постоянно, а не только, когда запущен сервер, необходимо реализовать хранение массива в файле.
//
// 		Подсказки:
// — В обработчиках получения данных по пользователю нужно читать файл
// — В обработчиках создания, обновления и удаления нужно файл читать, чтобы убедиться, что пользователь существует, а затем сохранить в файл, когда внесены изменения
// — Не забывайте про JSON.parse() и JSON.stringify() - эти функции помогут вам переводить объект в строку и наоборот.

// Сначала нам нужно подключить модуль fs, который позволяет работать с файлами.
const fs = require('fs').promises;

// Затем нам нужно создать функцию, которая будет читать файл с пользователями.
const getUsers = async (filename) => {
	try {
		// Считываем файл с пользователями.
		const users = await fs.readFile(filename, 'utf-8');

		// Преобразуем строку с пользователями в массив.
		const usersArray = JSON.parse(users);

		// Логируем действие.
		console.log('Users loaded successfully.');

		// Возвращаем массив пользователей.
		return usersArray;
	} catch (error) {
		console.error('Error reading users file or parsing JSON:', error.message);
		return [];
	}
};

// Теперь нам нужно создать функцию, которая будет сохранять массив пользователей в файл.
const saveUsers = async (filename, users) => {
	try {
		// Преобразуем массив пользователей в строку.
		const usersString = JSON.stringify(users);

		// Записываем строку с пользователями в файл.
		await fs.writeFile(filename, usersString, 'utf-8');

		// Логируем действие.
		console.log('Users saved successfully.');
	} catch (error) {
		console.error('Error saving users file or stringifying JSON:', error.message);
	}
};

// Теперь нам нужно создать функцию, которая будет обрабатывать запрос на получение всех пользователей.
const getAllUsers = (req, res) => {
	// Считываем файл с пользователями.
	const users = getUsers();

	// Отправляем ответ с пользователями.
	res.send(users);
};

// Теперь нам нужно создать функцию, которая будет обрабатывать запрос на получение пользователя по id.
const getUserById = (req, res) => {
	try {
		// Считываем файл с пользователями.
		const users = getUsers();

		// Находим пользователя по id.
		const user = users.find((user) => user.id === req.params.id);

		// Если пользователь не найден, то отправляем ошибку.
		if (!user) {
			res.status(404).send('User not found');
			return;
		}

		// Отправляем ответ с пользователем.
		res.send(user);
	} catch (error) {
		console.error('Error finding user by ID:', error.message);
		res.status(500).send('Internal Server Error');
	}
};

// Теперь нам нужно создать функцию, которая будет обрабатывать запрос на создание пользователя.
const createUser = (req, res) => {
	// Считываем файл с пользователями.
	const users = getUsers();

	// Добавляем нового пользователя в массив.
	users.push(req.body);

	// Сохраняем массив пользователей в файл.
	saveUsers(users);

	// Отправляем ответ с новым пользователем.
	res.send(req.body);
};

// Теперь нам нужно создать функцию, которая будет обрабатывать запрос на обновление пользователя.
const updateUser = (req, res) => {
	// Считываем файл с пользователями.
	const users = getUsers();

	// Находим пользователя по id.
	const user = users.find((user) => user.id === req.params.id);

	// Если пользователь не найден, то отправляем ошибку.
	if (!user) {
		res.status(404).send('User not found');
		return;
	}

	// Обновляем пользователя.
	user.name = req.body.name;
	user.email = req.body.email;

	// Сохраняем массив пользователей в файл.
	saveUsers(users);

	// Отправляем ответ с обновленным пользователем.
	res.send(user);
};

// Теперь нам нужно создать функцию, которая будет обрабатывать запрос на удаление пользователя.
const deleteUser = (req, res) => {
	// Считываем файл с пользователями.
	const users = getUsers();

	// Находим пользователя по id.
	const user = users.find((user) => user.id === req.params.id);

	// Если пользователь не найден, то отправляем ошибку.
	if (!user) {
		res.status(404).send('User not found');
		return;
	}

	// Удаляем пользователя из массива.
	users.splice(users.indexOf(user), 1);

	// Сохраняем массив пользователей в файл.
	saveUsers(users);

	// Отправляем ответ с пустым объектом.
	res.send({});
};

// Теперь нам нужно подключить модуль express.
const express = require('express');

// Создаем приложение express.
const app = express();

// Подключаем обработчики запросов.
app.get('/users', getAllUsers);
app.get('/users/:id', getUserById);
app.post('/users', createUser);
app.put('/users/:id', updateUser);
app.delete('/users/:id', deleteUser);

// Запускаем сервер.
app.listen(3000, () => {
	console.log('Server is running on port 3000');
});
